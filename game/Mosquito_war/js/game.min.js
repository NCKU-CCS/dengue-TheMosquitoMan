/*
Drop katha rate:
(1) level: 1/20
(2) mosking: 1/10

Drop mosAttack:
(1) mosAttack: 1/6
(2) mosking的Attack: 1/5
*/

;Quintus.EnemySprites = function(Q){
	Q.gravityY = 0;
  Q.gravityX = 0;

  var attackTimeInterval = 900 ;

	Q.Sprite.extend("Mos_magic_circle",{
		init: function(p){
			this._super(p,{
				x:Q.width/2 ,
				y: Q.height/2 - 100,
				asset:"level/mos_magic_circle.png",
				scale:0.1,
				opacity:0.1
			})
			this.add("tween");
		}
	})

	// Call Mosquito
	// Don't want to animate "opacity",cuz u will call "Enemy",that it has its "opacity"
	Q.Sprite.extend("MosquitoTracker" , {
		init: function(p){
			this._super(p,{
				x: Q.width/2 ,
				y: 70,
				scale: 1,
				direct: "up"
			})

			this.add("tween");
			this.move();
			// 被insert 的時候 call 它
			this.on("inserted",this,"setupBlocks");
		},

    setupBlocks: function() {
      Q._each(this.p.data,function(row,y) {
        Q._each(row,function(mosType,x) {
          if(mosType && mosType < 5) { 
            // Add onto the stage, with this as the container
            this.stage.insert(new Q.Enemy({
              mosType: mosType,
              x: 80 * x - (row.length / 2 - 0.5) * 80,
              y: 50 * y
            }), this);

          } else if (mosType >= 5){
          	// Add onto the stage, MosKingAttack
            this.stage.insert(new Q.MosKingAttack({
              mosType: mosType,
              x: 40 * x - (row.length / 2 - 0.5) * 40,
              y: 40 * y
            }), this);
          }
        },this);
      },this);
    },

    move: function(){
    	if(this.p.direct =="up")
    		this.animate({y:this.p.y - 30 , },0.6, Q.Easing.Quadratic.InOut,{ delay:0.3 , callback: function(){
    			Q('Enemy').trigger("call");
    		}});
    	else if(this.p.direct == "down")
    		this.animate({y:this.p.y + 30 },0.6, Q.Easing.Quadratic.InOut,{ delay:0.3 , callback: function(){
    			Q('MosKingAttack').trigger("call");
    		}});
    }
	});

	// 把 timer 變成 attackTimer
	Q.Sprite.extend("Enemy" , {
		init: function(p){
			this._super(p ,{
				sheet: "mos" + p.mosType,
				sprite: "enemy",
				collisionMask: Q.SPRITE_ENEMY ,
				mosId: GAME.ENEMY.mosId,
				opacity: 0.1,
				life: p.mosType,
				count: 0
			});
			this.add("tween");
			this.on("attacked,call"); 
			this.on("hit" , this ,"collide");
			this.animate({opacity:1},0.6,Q.Easing.Quadratic.InOut);

			GAME.ENEMY.mosId++

			var obj = this ; // 掉針

			GAME.ENEMY.attackTimer.push( setInterval(function(){
				if(Q.state.get("is_video_over") && Q.state.get("is_countdown_over")){
					
					var rand = Math.round(Math.random()* GAME.ENEMY.RATE_mosAttack); // Rate: 1/6
					var player_x =  Q.select('Player').items[0].p.x ;
	      	var player_y =  Q.select('Player').items[0].p.y ;
	      	var vx = player_x - obj.c.x ;
	      	var vy = player_y - obj.c.y ;

	      	var angle = Math.atan2( vy , vx)/Math.PI*180

					// 要判定場中有沒有出現相同的，因為原倍速太快，所以用比例調整速度
					// if(rand == 1 && Q("MosAttack").length < 20
					if(rand == 1){
						obj.stage.insert(new Q.MosAttack({
							x: obj.c.x ,
							y: obj.c.y ,
							vx: (vx>0)? 15 : (-15),
							vy: ((vx>0)? 15: (-15))*vy/vx,
							angle: angle - 90
						}));
					}
				}
			} , attackTimeInterval) );

		},

		call: function(){
	    this.c.y -= 30;
		},

		attacked: function(){
			this.p.life = this.p.life - 1 ;

			if (this.p.life <= 0){
				Q.audio.play('damage.mp3');

				var sheet = this.p.sheet ;
				switch(sheet){
					case "mos1":
						this.p.sheet = "enemy_death";
						break ;
					case "mos2":
						this.p.sheet = "mos2_death" ;
						break ;
					case "mos4":
						this.p.sheet = "mos4_death";
						break ;
					default :
						this.p.sheet = "enemy_death";
				};

				// CLEAR TIMER
				clearInterval( GAME.ENEMY.attackTimer[this.p.mosId] );
				dropKatha(this.stage,this,20);

				// 死掉，destroy
				this.animate({y: this.p.y + 15 , opacity: 0} , 0.15 , Q.Easing.Linear , {
					callback: function(){ this.destroy(); }
				});
			}
		},

		step: function(dt) {
			this.stage.collide(this);

			if(Q.state.get("is_countdown_over")){
	      this.p.count++ ; // use counter and that mos walk
	      if(this.p.count % GAME.ENEMY.mosSpeed == 0){
	      	this.p.y += 20;
	      	this.c.y += 20;
	      	this.p.count = 0;
	      }
			}

			if(this.p.y > Q.height)
				this.destroy();
    },

    collide: function(col) {

    	if(col.obj.isA("Player")) {
    		if(!Q.state.get("isPlayerAttack")){
      		Q("Player").trigger("hurt");
        	Q.state.dec("lives" , 1) ;
    		}
    		this.destroy(); 
    		clearInterval( GAME.ENEMY.attackTimer[this.p.mosId] );
      }
    }
	});

	Q.Sprite.extend("Mosking_talk", {
		init: function(p){
			this._super(p,{
				x: Q.width + 200 ,
				y: 100,
				sheet: "mosking_talk"
			})
			this.add("tween");
			this.animate({x: Q.width/2 + 180},0.3,Q.Easing.Quadratic.InOut,{
				delay:0.3
			})
		}
	})

	Q.Sprite.extend("Mosking_talk_frame",{
		init: function(p){
			this._super(p,{
				x:Q.width/2 - 90,
				y:90,
				sheet:"mosking_talk_frame",
				scale:0.1,
				angle:0,
				opacity:0
			})
			this.add("tween");
			this.animate({opacity:1 , angle:720,scale:1},0.3,Q.Easing.Quadratic.InOut,{
				delay:0.4
			});
		}
	})

	Q.Sprite.extend("Mosking_talk_text_2",{
		init: function(p){
			this._super(p,{
				x: Q.width/2 - 100,
				y: 90,
				asset:"level/mosking_talk_2.png",
				opacity:0
			})
			this.add("tween");
		}
	})

	Q.Sprite.extend("Mosking_talk_text_3",{
		init: function(p){
			this._super(p,{
				x: Q.width/2 - 100,
				y: 90,
				asset:"level/mosking_talk_3.png",
				opacity:0
			})
			this.add("tween");
		}
	})

	Q.Sprite.extend("MosAttack" , {
		init: function(p){
			this._super(p,{
				sheet: 'mosattack' ,
				sprite: "mosattack",
				collisionMask: Q.SPRITE_ENEMY 
			})

			this.add("2d");
			this.on("hit" , this ,"collide");
			this.on("destroy,disappear"); // will just call destroy()
		},

		step: function(dt) {
      this.p.x += this.p.vx * dt ;
      this.p.y += this.p.vy * dt ;
      this.stage.collide(this);

      /* 
      [OCCUR]:
      	1. 超出版面
      	2. 蚊子全滅（進入mosEnter）
      	3. 蚊子王掛掉
      */
			if(this.p.y > Q.height)
				this.destroy();
    },

    disappear: function(){
    	this.destroy();
    },

		collide: function(col) {

    	if(col.obj.isA("Player")) {
    		if(!Q.state.get("isPlayerAttack")){
      		Q("Player").trigger("hurt");
        	Q.state.dec("lives" , 1) ;
    		}
    		this.destroy(); 
      }else if (col.obj.isA("PlayerInvincible")){
      	Q.audio.play("player_invincible_attack.mp3");
      	this.destroy(); // When bump into Invincible Mask , destroy()
      }
    }
	})

	// 載入大蚊子
	Q.Sprite.extend("MosKing",{
		init: function(p){
			this._super(p,{
				sheet: 'mosking_anim' ,
				sprite: 'mosking_anim',
				collisionMask: Q.SPRITE_ENEMY ,
				x: Q.width/2,
				y: 110,
				scale: 0.1,
				opacity:1 ,
				life: Q.state.get("mosking_life")
			}) ;
			
			var obj = this ;

			this.on("destroy"); // will just call destroy()
			this.add("tween,animation") ;
			this.animate({scale:1}, 0.4 , Q.Easing.Quadratic.InOut);

			this.fly_up();
			this.play("default");

			window.setTimeout(function(){ obj.walk("right") ;} , 10000);
			console.log("mosking_lifea: " + this.p.life);
		},

		walk: function(test){
			var obj = this ;
			var mosking_w = this.p.w/2 ;
			if (test == "right"){
				window.setTimeout(function(){ obj.walk("left") ;} , 6000);
				this.animate({x:(Q.width - mosking_w)}, 0.6 , Q.Easing.Quadratic.InOut );
			}
			else if(test == "left"){
				window.setTimeout(function(){ obj.walk("right") ;}, 6000);
				this.animate({x:mosking_w} , 0.6 , Q.Easing.Quadratic.InOut );
			}
		},

		// 就是指蚊子王被打到後的動作
		destroyed: function(){
			var mosking_x = this.p.x ;
      var mosking_y = this.p.y ;

			if(this.p.life <= 0){
				// Scene: winner
				this.stage.trigger("complete");
				Q.audio.play('mosking_die_roar.mp3');

				Q('Player').trigger("destroy");
				Q('MosAttack').trigger("disappear");

				resetAttackTimer();	
			}

			Q.audio.play('mosking_hurt.mp3');

			this.stage.insert(new Q.MosKing_die({
				x:mosking_x ,
				y:mosking_y
			}));

			this.animate({opacity:0} , 0.1 , Q.Easing.Linear);
			this.destroy() ;
		},

		fly_up: function(){
      this.animate({y: 100 } ,1 , Q.Easing.Quadratic.InOut , {
        callback: function(){ this.fly_down();}
      }) ;
    },

    fly_down: function(){
      this.animate({y: 115 } ,0.5 , Q.Easing.Quadratic.InOut , {
        callback: function(){ this.fly_up();}
      }) ;
    }
	})

	// 被打到後的蚊子王
	Q.Sprite.extend("MosKing_die",{
		init: function(p){

			var life ;
			var recoverY ;

			this._super(p,{
				sheet: 'mosking_die' ,
				sprite: 'mosking_die',
				collisionMask: Q.SPRITE_ENEMY ,
				opacity:1 
			}) ;

			this.add("tween") ;
			this.opacity_0();
			Q.state.dec("mosking_life" , 1);

			life = Q.state.get("mosking_life");
			recoverY = this.p.y ; // record the location , that the mosking_die didn't drop

			if(life < 0){
				this.animate({y:this.p.y + 200} , 2 , Q.Easing.Linear , {
					callback: function(){ this.destroy(); }
				})
			}
			else{
				/*
					When mosking_die drop 0.8sec , then recover Mosking.
					But , its 'mosking_life' decs 1.
				*/
				this.animate({y:this.p.y + 15} , 0.8 , Q.Easing.Linear , {
					callback: function(){
						var sheet = (life >= 4)? "mosking_anim":"mosking_hurt";

						if(life === 3){
							playBGM(bgm_heartbeat_slow,1,false);
						}

						this.stage.insert(new Q.MosKing({
							x: this.p.x,
							y: recoverY, //recover to not drop's "y"
							sheet:sheet,
							scale: 1
						}));

						if(life %2 === 0 ){
							var random = Math.round(Math.random()*2 + 1);

							Q.audio.play("mosking_scream.mp3");
							Q('MosKingAttack').trigger('move');
							mosBloodEnter(this.stage,random,220);
						}

						this.destroy();
					}
				});	
			}
		},

		opacity_0: function(){
			this.animate({opacity:0} , 0.1 , Q.Easing.Quadratic.InOut , {
				callback: function(){ this.opacity_1(); }
			})
		},

		opacity_1: function(){
			this.animate({opacity:1} , 0.1 , Q.Easing.Linear , {
				callback: function(){ this.opacity_0(); }
			})
		}
	})

	Q.Sprite.extend("MosKingAttack" , {
		init: function(p){
			this._super(p , {
				sheet: 'moskingattack_'+ p.mosType,
				sprite: 'moskingattack' ,
				k_attackId: GAME.ENEMY.k_attackId ,
				live: 5 ,
				opacity:0
			})
			this.add("tween,animation");
			this.animate({opacity:1},0.6,Q.Easing.Quadratic.InOut);
			this.on("hit" , this ,"collide");
			this.on("disappear , attacked , call , move");

			// Push this run's ID , then compare in 'call' fun.
			GAME.ENEMY.k_attack_5.push(this.p.k_attackId);
			GAME.ENEMY.k_attackId++ ;

			// 掉針！！
			var k_obj = this ;

			GAME.ENEMY.k_attackTimer.push( setInterval(function(){
				if(Q.state.get("is_video_over") && Q.state.get("is_countdown_over") && Q.state.get("mosking_life") >= 0){

					var random = Math.round(Math.random() * GAME.ENEMY.RATE_moskingAttack); // 1/5

					var player_x =  Q.select('Player').items[0].p.x ;
	      	var player_y =  Q.select('Player').items[0].p.y ;
	      	var vx = player_x - k_obj.c.x ;
	      	var vy = player_y - k_obj.c.y ;

	      	var angle = Math.atan2( vy , vx)/Math.PI*180

					// 要判定場中有沒有出現相同的，因為原倍速太快，所以用比例調整速度
					// if(rand == 1 && Q("MosAttack").length < 20

					if ( random == 1){
						k_obj.stage.insert(new Q.MosAttack({
							x: k_obj.c.x ,
							y: k_obj.c.y ,
							vx: (vx>0)? 10 : (-10),
							vy: ((vx>0)? 10: (-10))*vy/vx,
							angle: angle - 90
						}));
					}
				}
			} , attackTimeInterval ) );
		},

		call: function(){
			// Check 
			if(GAME.ENEMY.k_attack_5.includes(this.p.k_attackId)){
				this.c.y += 30 ;
			}
		},

		move: function(){
			this.animate({y: this.p.y+60} ,0.5 , Q.Easing.Quadratic.InOut);
		},

		collide: function(col) {
   		if(col.obj.isA("Player")) {
    		if(!Q.state.get("isPlayerAttack")){
      		Q("Player").trigger("hurt");
        	Q.state.dec("lives" , 1) ;
    		}
    		this.play("disappear");
    		clearInterval( GAME.ENEMY.k_attackTimer[this.p.k_attackId] ); // clear attack timer
   		}
    },

    attacked: function(){
    	this.p.live -- ;

    	if(this.p.live == 0){
   			Q.audio.play("blood_bubble_broken.mp3");

   			this.play("disappear");
   			dropKatha(this.stage,this,10);
				clearInterval( GAME.ENEMY.k_attackTimer[this.p.k_attackId] ); // clear attack timer
      }	
    },

    disappear: function(){
    	this.destroy();
    },

    step: function(){
    	/*
    	[OCCUR]:
    		1. 超過框框
    	*/

    	if(this.p.y > Q.height)
				this.destroy();
			if(Q.state.get('mosking_life') < 0)
				this.play("disappear");
    }
	}) ;
}
/**
Katha_3: 共10秒，剩下1.5秒時開始閃爍！（這時候可以再吃到第二個katha_3，用來延續！)
**/
;Quintus.KathaSprites = function(Q){
	Q.gravityY = 0;
  Q.gravityX = 0;

  // drop Katha_1 一手遮蚊
	Q.Sprite.extend("Katha_1" , {
		init: function(p){
			this._super(p,{
				sheet: 'katha_1' ,
				sprite: "katha_1" ,
				collisionMask: Q.SPRITE_ENEMY ,
				vy: 50 
			})

			this.add("2d");
			this.on("hit" , this ,"collide");
      this.on("destroy");
		},

		step: function(dt) {
      this.p.y += this.p.vy * dt;
      this.stage.collide(this);

			if(this.p.y > Q.height)
				this.destroy();
    },

		collide: function(col) {
      
      // 應該要吃到才對
    	if(col.obj.isA("Power") || col.obj.isA("Player") || col.obj.isA("PlayerInvincible")) {
      	this.destroy();

        // Must to stop stage first, then stageScene('katha')
        stageStop();
      	
      	// 更改 state.set
      	Q.state.set("katha" , 1) ;
      	Q.stageScene("katha");

      	// 啟動Katha_1
      	Q("Power").trigger("power_up");
      }
    }
	})

  // drop Katha_2 縮蚊成寸
  Q.Sprite.extend("Katha_2" , {
    init: function(p){
      this._super(p,{
        sheet: 'katha_2' ,
        sprite: "katha_2" ,
        collisionMask: Q.SPRITE_ENEMY ,
        vy: 50 
      })

      this.add("2d");
      this.on("hit" , this ,"collide");
      this.on("destroy");
    },

    step: function(dt) {
      this.p.y += this.p.vy * dt;
      this.stage.collide(this);

      if(this.p.y > Q.height)
        this.destroy();
    },

    collide: function(col) {
      
      // 應該要吃到才對
      if(col.obj.isA("Power") || col.obj.isA("Player") || col.obj.isA("PlayerInvincible")) {
        this.destroy();

        // Must to stop stage first, then stageScene('katha')
        stageStop();
        
        // 更改 state.set
        Q.state.set("katha" , 2) ;
        Q.stageScene("katha");

        // 啟動Katha_2
        Q("Player").trigger("player_speedUp");
      }
    }
  })

  // drop Katha_3 防蚊神體
  Q.Sprite.extend("Katha_3" , {
    init: function(p){
      this._super(p,{
        sheet: 'katha_3' ,
        sprite: "katha_3" ,
        collisionMask: Q.SPRITE_ENEMY ,
        vy: 50 
      })

      this.add("2d");
      this.on("hit" , this ,"collide");
      this.on("destroy");
    },

    step: function(dt) {
      this.p.y += this.p.vy * dt;
      this.stage.collide(this);

      if(this.p.y > Q.height)
        this.destroy();
    },

    collide: function(col) {
      
      // 應該要吃到才對
      if(col.obj.isA("Power") || col.obj.isA("Player") || col.obj.isA("PlayerInvincible")) {
        this.destroy();

        // Must to stop stage first, then stageScene('katha')
        stageStop();
        
        // 更改 state.set
        Q.state.set("katha" , 3) ;
        Q.stageScene("katha");

        // 啟動Katha_3
        Q("Player").trigger("player_invincible");
      }
    }
  })


}
;Quintus.LandingUI = function(Q) {

	Q.Sprite.extend("Logo" , {
		init: function(p){
			this._super({
				x: Q.width/2 + 10 ,
				y: 150 ,
        opacity: 1 ,
				asset: "logo.png"
			})

      this.add("tween");
		}
	});

  Q.Sprite.extend("Background",{
    init: function(p) {
      this._super(p,{
        x: Q.width/2,
        y: Q.height/2,
        cx: Q.width/2  ,
        cy: (Q.height/2)*3 ,
        asset: 'landing/landing_bg_long.png',
        opacity: 1 ,
        type: 0
      });

      this.add("tween");
    }
  });

  Q.Sprite.extend("Landing_start", {
    init: function(p){
      this._super(p,{
        asset: 'landing/landing_btn_start.png' ,
        x: Q.width/2 ,
        y: 300,
        opacity: 1 ,
        scale:1,
        type: Q.SPRITE_UI
      });

      this.add("tween");
      this.on("touch");
    },
    touch: function(){
      button_click(this);
    }
  });

  Q.Sprite.extend("Landing_player", {
    init: function(p){
      this._super(p,{
        asset: 'landing/landing_btn_player.png' ,
        x: Q.width/2 ,
        y: 360,
        opacity: 1 ,
        scale:1 ,
        type: Q.SPRITE_UI
      });

      this.add("tween");
      this.on("touch");
    },
    touch: function(){
      button_click(this);
    }
  })

  // 
  // INTRO 頁面！！
  // 
  Q.Sprite.extend("IntroBg",{
    init: function(p) {
      this._super(p,{
        x: Q.width/2,
        y: Q.height/2,
        asset: 'landing/intro_bg.png',
        opacity: 1
      });

      this.add("tween");
    }
  });

  Q.Sprite.extend("IntroMan",{
    init: function(p) {
      this._super(p,{
        x: Q.width/2 + 5 ,
        y: Q.height - 100,
        asset: 'landing/intro_man.png',
        scale: 0.1
      });

      this.add("tween");
      this.animate({scale:1} , 0.3 , Q.Easing.Quadratic.InOut);
    }
  }); 

  Q.UI.Text.extend("IntroText" , {
    init: function(){
      this._super({
        label : "               天地不仁，以萬物為芻狗。\n吾號掌蚊人，生逢亂世，慘遭「登革熱」\n危害，為了傷其根，斬其源，吾將自己\n逼進死關，為的就是完成降蚊十八招大成。\n\n        時間只有五分鐘，戰友們！衝吧！" ,
        align: "left" ,
        x: 80,
        y: 150,
        weight: "normal" ,
        color: "#fffaf0",
        family:"Arial,微軟正黑體,sans-serif",
        size: 20,
        opacity: 0
      });

      this.add("tween");
      this.animate({opacity:1} , 0.5 , Q.Easing.Linear);
    }
  });

  Q.Sprite.extend("IntroGo",{
    init: function(p) {
      this._super(p,{
        x: Q.width/2 - 70,
        y: Q.height/2 + 55 ,
        asset: 'landing/intro_btn_go.png',
        opacity:0,
        scale:1 ,
        type:Q.SPRITE_UI
      });

      this.add("tween");
      this.on("touch");
      this.animate({opacity:1} , 0.5 , Q.Easing.Quadratic.InOut);
    },
    touch: function(){
      button_click(this);
    }
  }); 

  Q.Sprite.extend("IntroHowplay",{
    init: function(p) {
      this._super(p,{
        x: Q.width/2 + 70,
        y: Q.height/2 + 55 ,
        asset: 'landing/intro_btn_howplay.png',
        opacity:0,
        scale:1,
        type:Q.SPRITE_UI
      });

      this.add("tween");
      this.on("touch");
      this.animate({opacity:1} , 0.5 , Q.Easing.Quadratic.InOut);
    },
    touch: function(){
      button_click(this);
    }
  }); 

  // 
  // PLAYER 頁面
  // 
  Q.Sprite.extend("PlayerRight" , {
    init: function(p){
      this._super(p,{
        sheet: "player_right",
        sprite: "player_right",
        x: Q.width/2 + 25,
        y: Q.height -25,
        type: Q.SPRITE_UI
      });

      this.add("animation");
    }
  })

  Q.Sprite.extend("PlayerLeft" , {
    init: function(p){
      this._super(p,{
        sheet: "player_left",
        sprite: "player_left",
        x: Q.width/2 - 25,
        y: Q.height -25,
        type: Q.SPRITE_UI
      });

      this.add("animation");
    }
  })

  Q.Sprite.extend("PlayerBack" , {
    init: function(p){
      this._super(p,{
        sheet: "player_back",
        sprite: "player_back",
        x: Q.width - 60,
        y: Q.height - 20,
        type: Q.SPRITE_UI,
        opacity:1,
        scale:1
      });

      this.add("tween");
      this.on("touch");
    },
    touch: function(){
      button_click(this);
    }

  })

  // 
  // 人
  Q.Sprite.extend("PlayerManBg",{
    init: function(p) {
      this._super(p,{
        x: Q.width/2,
        y: Q.height/2,
        asset: 'player/player_man_bg.png',
        type: Q.SPRITE_UI,
      });

      this.add("tween");
    }
  });

  Q.Sprite.extend("PlayerManRotate" , {
    init: function(p){
      this._super(p,{
        sheet: "player_man_rotate",
        sprite: "player_man_rotate",
        x: Q.width/2 + 10,
        y: Q.height - 160 ,
      });

      this.add("animation");
      this.on("rotate");
    },

    rotate: function(){
      Q.audio.play("player_ha.mp3");
      this.play("rotate");
    }
  })

  Q.Sprite.extend("PlayerManMan" , {
    init: function(p){
      this._super(p,{
        sheet: "player_man_man",
        sprite: "player_man_man",
        x: Q.width/2 ,
        y: Q.height/2 - 10
      });
      this.add("animation");
      this.play("default");
      this.on("startRotate");
    },

    startRotate: function(){
      Q("PlayerManRotate").trigger("rotate");
    }
  })

  // 四步殺蚊
  Q.Sprite.extend("PlayerManText1" , {
    init: function(p){
      this._super(p,{
        asset: "player/player_man_text1.png",
        x: Q.width/2 - 140,
        y: Q.height/2 - 70,
        type: Q.SPRITE_UI,
        scale: 4,
        opacity: 1
      });

      Q.audio.play("kick.mp3");
      // 因為在setTimeout裡，function 的 this 為 window，所以在這裡先記錄
      text1 = this ;

      this.add("tween");
      this.animate({ scale: 1 },0.2, Q.Easing.Quadratic.InOut , {
        callback: function(){
          window.setTimeout(function(){
            text1.stage.insert(new Q.PlayerManText2());
          } , 300)

          this.animate({opacity: 0} , 0.4 , Q.Linear , {
            delay: 0.6,
            callback: function(){
              this.destroy();
            }
          })
        }
      });
    }
  })

  Q.Sprite.extend("PlayerManText2" , {
    init: function(p){
      this._super(p,{
        asset: "player/player_man_text2.png",
        x: Q.width/2 + 150,
        y: Q.height/2 - 40,
        type: Q.SPRITE_UI,
        scale: 4,
        opacity: 1
      });

      Q.audio.play("kick.mp3");
      text2 = this ;

      this.add("tween");
      this.animate({ scale: 1 },0.2, Q.Easing.Quadratic.InOut , {
        callback: function(){
          window.setTimeout(function(){
            text2.stage.insert(new Q.PlayerManText3());
          } , 300)

          this.animate({opacity: 0} , 0.4 , Q.Linear , {
            delay: 0.6,
            callback: function(){
              this.destroy();
            }
          })
        }
      });
    }
  })

  Q.Sprite.extend("PlayerManText3" , {
    init: function(p){
      this._super(p,{
        asset: "player/player_man_text3.png",
        x: Q.width/2 - 120,
        y: Q.height/2 + 10,
        type: Q.SPRITE_UI,
        scale: 4,
        opacity: 1
      });

      Q.audio.play("kick.mp3");
      text3 = this ;

      this.add("tween");
      this.animate({ scale: 1 },0.2, Q.Easing.Quadratic.InOut , {
        callback: function(){
          window.setTimeout(function(){
            text3.stage.insert(new Q.PlayerManText4());
          } , 300);

          this.animate({opacity: 0} , 0.4 , Q.Linear , {
            delay: 0.6,
            callback: function(){
              this.destroy();
            }
          })
        }
      });
    }
  })

  Q.Sprite.extend("PlayerManText4" , {
    init: function(p){
      this._super(p,{
        asset: "player/player_man_text4.png",
        x: Q.width/2 + 100,
        y: Q.height/2 + 70,
        type: Q.SPRITE_UI,
        scale: 4,
        opacity: 1
      });

      Q.audio.play("kick.mp3");
      this.add("tween");
      this.animate({ scale: 1 },0.2, Q.Easing.Quadratic.InOut , {
        callback: function(){
          // window.setTimeout(function(){
          //   Q.audio.play("player_ha.mp3");
          // } , 300)

          this.animate({opacity: 0} , 0.4 , Q.Linear , {
            delay: 0.6,
            callback: function(){
              this.destroy();
            }
          })
        }
      });
    }
  })

  // 蚊子王
  Q.Sprite.extend("PlayerMoskingBg",{
    init: function(p) {
      this._super(p,{
        x: Q.width/2,
        y: Q.height/2,
        asset: 'player/player_mosking_bg.png',
        type: Q.SPRITE_UI,
      });

      this.add("tween");
    }
  });

  Q.Sprite.extend("PlayerMoskingRotate",{
    init: function(p) {
      this._super(p,{
        sheet: "player_mos_rotate",
        sprite: "player_mos_rotate",
        x: Q.width/2,
        y: Q.height - 160 ,
      });

      this.add("animation");
      this.play("rotate");
    }
  });

  Q.Sprite.extend("PlayerMosking" , {
    init: function(p){
      this._super(p,{
        sheet: "mosking",
        sprite: "mosking",
        x: Q.width/2 ,
        y: Q.height/2 - 10
      });

      this.add("tween");
      this.fly_up();
    },

    fly_up: function(){
      this.animate({y: Q.height/2 - 15} ,0.7 , Q.Easing.Quadratic.InOut , {
        callback: function(){ this.fly_down();}
      }) ;
    },

    fly_down: function(){
      this.animate({y: Q.height/2 - 8} ,0.5 , Q.Easing.Linear , {
        callback: function(){ this.fly_up();}
      }) ;
    }
  })

  // 將軍蚊
  Q.Sprite.extend("PlayerMosGBg",{
    init: function(p) {
      this._super(p,{
        x: Q.width/2,
        y: Q.height/2,
        asset: 'player/player_mosG_bg.png'
      });
    }
  });

  Q.Sprite.extend("PlayerMosG" , {
    init: function(p){
      this._super(p,{
        x: Q.width/2 ,
        y: Q.height/2 - 10,
        asset: 'player/player_mos.png',
        type: Q.SPRITE_UI
      })

      this.add("tween");
      this.fly_up();
    },

    fly_up: function(){
      this.animate({y: Q.height/2 - 18} ,0.5 , Q.Easing.Quadratic.InOut , {
        callback: function(){ this.fly_down();}
      }) ;
    },

    fly_down: function(){
      this.animate({y: Q.height/2 - 5} ,0.5 , Q.Easing.Quadratic.InOut , {
        callback: function(){ this.fly_up();}
      }) ;
    }
  })

  // 蚊子
  Q.Sprite.extend("PlayerMosBg",{
    init: function(p) {
      this._super(p,{
        x: Q.width/2,
        y: Q.height/2,
        asset: 'player/player_mos_bg.png'
      });
    }
  });

  Q.Sprite.extend("PlayerMos" , {
    init: function(p){
      this._super(p,{
        x: Q.width/2 ,
        y: Q.height/2 - 10,
        asset: 'player/player_mos.png',
        type: Q.SPRITE_UI
      })

      this.add("tween");
      this.fly_up();
    },

    fly_up: function(){
      this.animate({y: Q.height/2 - 18} ,0.5 , Q.Easing.Quadratic.InOut , {
        callback: function(){ this.fly_down();}
      }) ;
    },

    fly_down: function(){
      this.animate({y: Q.height/2 - 5} ,0.5 , Q.Easing.Quadratic.InOut , {
        callback: function(){ this.fly_up();}
      }) ;
    }
  })

  // 
  // GameDescription
  Q.Sprite.extend("GameDescription_bg",{
    init: function(p){
      this._super(p,{
        x: Q.width/2 ,
        y: Q.height/2 ,
        opacity:0 ,
        scale:0.1,
        asset: 'landing/game_description_bg.png'
      })

      this.add('tween');
      this.animate({scale:1 , opacity:1},0.3 , Q.Easing.Quadratic.InOut)
    }
  })
}

;Quintus.LevelUI = function(Q) {
  var lives_state ;
  var container ;
  var isLevelStop = false;

  Q.Sprite.extend("Level_bg",{
    init: function(p) {
      this._super(p,{
        x: Q.width/2,
        y: Q.height/2,
        opacity:1 ,
        asset: 'level/level_bg.png',
        type: Q.SPRITE_UI
      });

      this.add("tween");
      this.on("touch");
    },

    touch : function(touch){
      if(Q.state.get("is_countdown_over") && !Q.state.get("isLevelStop") && Q.state.get("mosking_life") >= 0 && Q.state.get("lives") > 0){
        
        var power_x = Q.select('Player').items[0].p.x ;
        var power_y = Q.select('Player').items[0].p.y - 70 ;

        var dx = touch.x - power_x;
        var dy = touch.y - power_y;

        // atan2(y , x)，出來 angel是一个弧度值，且判斷好象限
        var angle = Math.atan2(dy, dx)/Math.PI*180

        // 看一下有沒有吃到奧義
        var is_power_up = Q.state.get("power_up");
        if(is_power_up>0) {
          sheet = 'power_up';
          this.stage.insert(new Q.PrePowerUp({
            x: power_x + 15,
            y: power_y + 20
          }));
          
          Q.audio.play("powerUp.mp3");

        }else{
          sheet = 'power';
          this.stage.insert(new Q.PrePower({
            x: power_x + 15,
            y: power_y + 10
          }));
        }

        this.stage.insert(new Q.Power({
          sheet: sheet , // sheet 決定弄出哪一張圖
          x: power_x + 20,
          y: power_y,
          vx: dx,
          vy: dy,
          angle: angle + 90
        }));
      }
    }
  });

  Q.Sprite.extend("Life" , {
    init: function(p){
      this._super(p,{
        sheet: "life",
        sprite: "life",
        y: Q.height - 15,
        type: Q.SPRITE_UI
      })
    }
  })

  Q.Sprite.extend("Lives_text" , {
    init: function(){
      this._super({
        sheet: "life_text",
        sprite: "life_text" ,
        x: 70 ,
        y: Q.height - 15 
      })

      lives_state = Q.state.get("lives");

      this.on("inserted",this,"initLives");
      Q.state.on("change.lives" , this ,"setLives") ;
    },

    initLives: function(){
      var d = 20 ;

      for (var i = 1 ; i <= lives_state ; i++ )
        GAME.PLAYER.life.push( this.stage.insert(new Q.Life({x: 90 + d*i })) );
    },

    setLives: function(){
      lives_state = Q.state.get("lives");

      GAME.PLAYER.life[lives_state].destroy(); // destroy LIFE BALL()
      GAME.PLAYER.life.pop(); // Clear Pop array

      if (lives_state <= 0){

        // Cuz this.stage is pointed to 'hud'(stage:2) , so use Q.stage()--> 'level1'
        Q.stage().trigger("lose");

        // Player , Attack . destroy!
        Q('MosAttack').trigger("disappear");
        Q('Player').trigger('destroy');

        stopBGM(Q.state.get("whichBGM"));
        playBGM(bgm_lose);

        resetAttackTimer(); 
      }
    }
  });

  Q.Sprite.extend("Countdown_three" , {
    init: function(p){
      this._super(p,{
        x: -100 ,
        y: 0,
        sheet: "three_dark"
      })
      this.add("tween");
      this.animate({},1,Q.Easing.Linear,{
        callback:function(){
          this.light();
        }
      });
    },
    light: function(){
      Q.audio.play("countdown.mp3");
      this.p.sheet = "three_bright";
    }
  });
  Q.Sprite.extend("Countdown_two" , {
    init: function(p){
      this._super(p,{
        x: 0,
        y: 0,
        sheet: "two_dark"
      })
      this.add("tween");
      this.animate({},2,Q.Easing.Linear,{
        callback:function(){
          this.light();
        }
      });
    },
    light: function(){
      Q.audio.play("countdown.mp3");
      this.p.sheet = "two_bright";
    }
  });
  Q.Sprite.extend("Countdown_one" , {
    init: function(p){
      this._super(p,{
        x: 100,
        y: 0,
        sheet: "one_dark"
      })
      this.add("tween");
      this.animate({},3,Q.Easing.Linear,{
        callback:function(){
          this.light();
        }
      });
    },
    light: function(){
      var obj = this ;
      Q.audio.play("countdown.mp3");
      this.p.sheet = "one_bright";

      this.animate({},1,Q.Easing.Linear,{
        callback:function(){
          this.stage.trigger("countdown_over");
          Q.audio.play("countdown_final.mp3");
        }
      });
    }
  });

  Q.Sprite.extend("LevelStop_btn" , {
    init : function(p){
      this._super(p,{
        sheet: "level_stop",
        x: Q.width - 30  ,
        y: Q.height -15 ,
        opacity:1,
        scale:1,
        type: Q.SPRITE_UI
      })
      
      this.on("touch");
      this.add("tween");
    },

    touch : function(){
      if(!Q.state.get("isLevelStop")){
        if(!Q.state.get('is_countdown_over')){
          Q.clearStage(3); // clear countdown
        }

        Q.audio.play("click.mp3");

        button_click(this);
        stopBGM(Q.state.get("whichBGM"), 'continue') ;
        // Stop
        Q.state.set("isLevelStop",true) ;
        stageStop();

        container = this.stage.insert(new Q.UI.Container({
          fill: "rgba(0,0,0,0.6)" ,
          border: "5",
          shadowColor: "rgba(0,0,0,0.5)",
          w: Q.width,
          h: Q.height,
          x: Q.width/2,
          y: Q.height/2
        }));

        // 塞到container 這個容器
        this.stage.insert(new Q.LevelContinue_btn(),container);
        this.stage.insert(new Q.LevelGoTitle_btn(),container);
      }
    }
  })
  

  Q.Sprite.extend("LevelContinue_btn" , {
    init: function(p){
      this._super(p,{
        sheet : "level_continue",
        x: 0,
        y: -30,
        opacity:1,
        scale:1,
        type: Q.SPRITE_UI
      })

      this.on("touch");
      this.add("tween");
    },

    touch : function(){
      if(!Q.state.get('is_countdown_over')){
        Q.stageScene("countdown");
      }

      Q.audio.play("click.mp3");

      button_click(this);
      playBGM(Q.state.get("whichBGM"));

      if (Q.state.get("isLevelStop") === true){
        Q.state.set("isLevelStop", false);
        
        container.destroy();
        stageContinue();
      }
    }
  })

  Q.Sprite.extend("LevelGoTitle_btn" , {
    init: function(p){
      this._super(p,{
        sheet : "level_goTitle",
        x: 0,
        y: 30,
        opacity:1,
        scale:1,
        type: Q.SPRITE_UI
      })

      this.on("touch");
      this.add("tween");
    },

    touch : function(){

      Q.audio.play("click.mp3");

      button_click(this);
      stopBGM(Q.state.get("whichBGM")) ; // reset 'bgm_level1' time
      reset(); // reset

      Q.stageScene("title");
      this.container.destroy();
    }
  })

  Q.UI.Text.extend("Level" , {
  	init: function(){
  		this._super({
  			label : "Level: 1" ,
  			align: "right" ,
  			level: 1 ,
  			x: Q.width -70  ,
  			y: Q.height - 10 ,
  			weight: "normal" ,
  			size: 18 
  		});

  		// If Q.state.state("level",2) is called --> this onchanged
  		Q.state.on("change.level",this,"level");
  	},

  	level: function(level) {
      this.p.label = "level: " + level;
    }
  });

  /* comment out the Score ;

  Q.UI.Text.extend("Score" , {
  	init: function(){
  		this._super({
  			label: "Score: 0" ,
  			align: "center",
  			x: Q.width/2 ,
  			y: Q.height - 10 ,
  			weight: "normal",
  			size: 18
  		})

  		Q.state.on("change.score",this,"score");
  	},

  	score: function(score){
  		this.p.label = "Score: "+ score ;
  	}
  })

  */

  Q.Sprite.extend("Katha_1_bg",{
    init: function(p) {
      this._super(p,{
        x: Q.width/2,
        y: -300,
        asset: 'katha/katha_1_bg.png',
        type: 0
      });

      this.add("tween");
      this.animate({y: Q.height/2 } , 0.3 , Q.Easing.Linear);
    }
  });

  Q.Sprite.extend("Katha_1_title",{
    init: function(p) {
      this._super(p,{
        x: Q.width/2 + 10,
        y: Q.height/2 - 60,
        asset: 'katha/katha_1_title.png',
        type: 0,
        opacity: 0
      });

      this.add("tween");
      this.animate({opacity: 1} , 0.3 , Q.Linear ,{
        delay: 0.4
      });
    }
  });

  Q.UI.Text.extend("Katha_1_text" , {
    init: function(p){
      this._super(p,{
        label: "功法：\n1. 在家中裝紗窗、紗門，不讓蚊蟲進屋，睡覺時掛蚊帳。\n2. 使用捕蚊燈電蚊拍，陰暗處或是地下室定期巡邏。\n3. 若有放在戶外的廢棄輪胎、積水容器等物品馬上清除。" ,
        align: "left",
        x: 80,
        y: 240 ,
        weight: "300",
        family:"Arial,微軟正黑體,sans-serif",
        opacity: 0,
        size: 16
      })

      this.add("tween");
      this.animate({opacity: 1} , 0.3 , Q.Linear ,{
        delay: 0.4
      });
    }
  });

  Q.UI.Text.extend("Katha_1_function" , {
    init: function(p){
      this._super(p,{
        label: "效果：\n    召喚大魔導彈攻擊，持續 10 秒。" ,
        align: "left",
        x: 100,
        y: 330 ,
        weight: "300",
        size: 16,
        family:"Arial,微軟正黑體,sans-serif",
        color: "darkred",
        opacity:0
      })

      this.add("tween");
      this.animate({opacity: 1} , 0.3 , Q.Linear ,{
        delay: 0.4
      });
    }
  });


  Q.Sprite.extend("Katha_close_btn",{
    init: function(p) {
      this._super(p,{
        x: Q.width - 100,
        y: Q.height/2 + 70,
        asset: 'katha/katha_close.png',
        opacity:0,
        type: Q.SPRITE_UI
      });

      this.add("tween");
      this.on("touch");

      this.animate({opacity: 1} , 0.3 , Q.Linear ,{
        delay: 0.3
      });
    },

    touch: function(){
      button_click(this);
    }
  });

  Q.Sprite.extend("Katha_2_bg",{
    init: function(p) {
      this._super(p,{
        x: Q.width/2,
        y: -300,
        asset: 'katha/katha_2_bg.png',
        type: 0
      });

      this.add("tween");
      this.animate({y: Q.height/2 } , 0.3 , Q.Easing.Linear);
    }
  });

  Q.Sprite.extend("Katha_2_title",{
    init: function(p) {
      this._super(p,{
        x: Q.width/2 + 10,
        y: Q.height/2 - 60,
        asset: 'katha/katha_2_title.png',
        type: 0,
        opacity: 0
      });

      this.add("tween");
      this.animate({opacity: 1} , 0.3 , Q.Linear ,{
        delay: 0.4
      });
    }
  });

  Q.UI.Text.extend("Katha_2_text" , {
    init: function(p){
      this._super(p,{
        label: "功法：\n1. 清除不需要的容器，像花瓶、瓶蓋、缸盆、保麗龍\n、餅乾盒等，減少垃圾。\n2. 把暫時不需要用的容器「倒放」，以免積水。" ,
        align: "left",
        x: 80,
        y: 240 ,
        weight: "300",
        family:"Arial,微軟正黑體,sans-serif",
        opacity: 0,
        size: 16
      })

      this.add("tween");
      this.animate({opacity: 1} , 0.3 , Q.Linear ,{
        delay: 0.4
      });
    }
  });

  Q.UI.Text.extend("Katha_2_function" , {
    init: function(p){
      this._super(p,{
        label: "效果：\n    移動速度升為 300%，持續 10 秒。" ,
        align: "left",
        x: 100,
        y: 330 ,
        weight: "300",
        size: 16,
        family:"Arial,微軟正黑體,sans-serif",
        color: "darkred",
        opacity:0
      })

      this.add("tween");
      this.animate({opacity: 1} , 0.3 , Q.Linear ,{
        delay: 0.4
      });
    }
  });

  Q.Sprite.extend("Katha_3_bg",{
    init: function(p) {
      this._super(p,{
        x: Q.width/2,
        y: -300,
        asset: 'katha/katha_3_bg.png',
        type: 0
      });

      this.add("tween");
      this.animate({y: Q.height/2 } , 0.3 , Q.Easing.Linear);
    }
  });

  Q.Sprite.extend("Katha_3_title",{
    init: function(p) {
      this._super(p,{
        x: Q.width/2 + 10,
        y: Q.height/2 - 60,
        asset: 'katha/katha_3_title.png',
        type: 0,
        opacity: 0
      });

      this.add("tween");
      this.animate({opacity: 1} , 0.3 , Q.Linear ,{
        delay: 0.4
      });
    }
  });

  Q.UI.Text.extend("Katha_3_text" , {
    init: function(p){
      this._super(p,{
        label: "功法：\n1. 常洗澡，保持皮膚清爽。\n2. 在戶外或蚊蟲多的地方，盡量穿淺色長袖衣褲。\n3. 多吃洋蔥、大蒜、高麗菜、綠花椰菜，蚊子遠離你。" ,
        align: "left",
        x: 80,
        y: 240 ,
        family:"Arial,微軟正黑體,sans-serif",
        weight: "300",
        opacity: 0,
        size: 16
      })

      this.add("tween");
      this.animate({opacity: 1} , 0.3 , Q.Linear ,{
        delay: 0.4
      });
    }
  });

  Q.UI.Text.extend("Katha_3_function" , {
    init: function(p){
      this._super(p,{
        label: "效果：\n    就是「無敵」，持續 6.666 秒。" ,
        align: "left",
        x: 100,
        y: 330 ,
        weight: "300",
        family:"Arial,微軟正黑體,sans-serif",
        color: "darkred",
        size: 16,
        opacity:0
      })

      this.add("tween");
      this.animate({opacity: 1} , 0.3 , Q.Linear ,{
        delay: 0.4
      });
    }
  });
}
/*
*/

;Quintus.PlayerSprites = function(Q){
	Q.gravityY = 0;
  Q.gravityX = 0;

	// 紀錄被 power 打到的上一個
	var lastCollide = null;
	var twinkle_count = 10 ;

	// 載入玩家
	Q.Sprite.extend("Player",{
		init: function(p){
			this._super(p,{
				sheet: 'player' ,
				sprite: 'player',
				type: Q.SPRITE_ENEMY ,
				opacity: 1 ,
				x: Q.width/2,
				y: 470
			}) ;

			Q.state.set("player_h" , this.p.h) ;
			
			this.add("tween");
			this.on("player_speedUp , player_invincible , player_recover, hurt , destroy");
		},

		step: function(dt){
			// 控制人物
			var player_w = this.p.w/2 ;
			if (Q.inputs['A']){
				this.p.x -= GAME.PLAYER.moveSpeed ;

				if ( this.p.x < player_w)
					this.p.x = player_w ;
			}else if (Q.inputs['D']){
				this.p.x += GAME.PLAYER.moveSpeed ;

				if ( this.p.x > (Q.width - player_w))
					this.p.x = (Q.width - player_w) ;
			}

			if(Q("Enemy").length == 0 ){
				if(Q.state.get("isMosenter")) ;
				else{
					if(GAME.PLAYER.mos_addCount > 0){
						Q('MosAttack').trigger('destroy');

						Q.state.inc("isMosenterScene",1); // according to "isMosenterScene" NUM
						Q.stageScene("mosEnter"); // 召喚蚊子
						
						GAME.PLAYER.mos_addCount -- ; 
					} 
					else if(GAME.PLAYER.mos_addCount == 0 && Q("Enemy").length == 0){
						this.stage.insert(new Q.MosKing()); // 加入魔王

						stopBGM(Q.state.get("whichBGM"));
						mosBloodEnter(this.stage,1,220); // blood bubble
						
						// 使 GAME.PLAYER.mos_addCount = -1 不繼續動
						GAME.PLAYER.mos_addCount -- ;
		    		playVideo(GAME.VIDEO.mosking_appear , 2); // Play video_mosking_appear
					}	
				}
			}
		},

		hurt: function(){
			Q.audio.play("player_hurt.mp3");

			var count = 8;
			Q.state.set("isPlayerAttack",true);
			this.twinkle_opacity_0(count);
		},

		twinkle_opacity_0: function(count){

			if( count > 0 ){
				count -- ; // when count = 1 , --> 0.2sec
				this.animate({opacity:0},0.1,Q.Easing.Quadratic.InOut,{
					callback: function(){
						this.twinkle_opacity_1(count);
					}
				})
			}else{
				Q.state.set("isPlayerAttack",false);

				switch(Q.state.get("lives"))
				{
					case 3:
						this.p.sheet = "man_life_3";
						this.p.h = 120 ;
						this.p.cy= 60; // update center "Y" ; 
						break ;
					case 2:
						this.p.sheet = "man_life_2";
						break;
					case 1:
						this.p.sheet = "man_life_1";
						this.p.cx=40;
						this.p.w = 80;
						this.p.h = 120 ;
						break;
					default:
						Q.stageScene("gameOver");
				}
			}
		},

		twinkle_opacity_1: function(count){
			this.animate({opacity:1},0.1,Q.Easing.Quadratic.InOut,{
				callback: function(){
					this.twinkle_opacity_0(count);
				}
			})
		},

		player_speedUp: function(){

			var player_x = this.p.x ;
      var player_y = this.p.y ;

      GAME.PLAYER.moveSpeed = 9;

      this.stage.insert(new Q.PlayerSpeedUP({
      	x: player_x,
      	y: player_y + 40
      }))
		},

		player_invincible: function(){
			var player_x = this.p.x ;
      var player_y = this.p.y ;

      this.stage.insert(new Q.PlayerInvincible({
      	x: player_x ,
      	y: player_y + 15
      }))
		},

		player_recover : function(){
			GAME.PLAYER.moveSpeed = 3;
			Q("PlayerSpeedUP").trigger("hidden_destroy");
		}
	})

	Q.Sprite.extend("PlayerSpeedUP",{
		init: function(p){
			this._super(p,{
				sheet: "player_speedup",
				sprite: "player_speedup",
				scale: 0.1,
				opacity: 0.1
			})

			this.add("animation,tween");
			this.animate({scale: 1 , opacity: 1} , 0.2 , Q.Easing.Linear);
			this.play("default");

			this.on("hidden_destroy");
		},

		step: function(){
			if(Q.state.get("mosking_life") < 0 || Q.state.get("lives") <= 0){
				this.destroy();
			}else{
				this.p.x = Q.select('Player').items[0].p.x ;
			}
		},

		hidden_destroy: function(){
			this.animate({opacity: 0} , 1 , Q.Easing.Linear , {
				callback: function(){ this.destroy()}
			});
		}
	})

	Q.Sprite.extend("PlayerInvincible" , {
		init: function(p){
			this._super(p,{
				sheet: "player_invincible",
				sprite: "player_invincible",
				opacity: 0 ,
				type: Q.SPRITE_ENEMY ,
			})

			this.add("tween");
			this.on("twinkle_show");
			this.on("twinkle_hidden");
			this.on("hidden_destroy");

			this.animate({opacity: 1} , 0.3 , Q.Easing.Linear);
		},
		step: function(){
			if(Q.state.get("mosking_life") < 0 || Q.state.get("lives") <= 0){
				this.destroy();
			}else{
				this.p.x = Q.select('Player').items[0].p.x ;
			}
		},
		hidden_destroy: function(){
			twinkle_count = 15 ;
			this.twinkle_hidden();
		},
		twinkle_hidden: function(){
			twinkle_count-- ;
			this.animate({opacity:0},0.1,Q.Easing.Linear,{
				callback: function(){ this.twinkle_show();}
			})
		},
		twinkle_show: function(){
			if(twinkle_count > 0){
				this.animate({opacity:1},0.1,Q.Easing.Linear,{
					callback: function(){ this.twinkle_hidden();}
				})
			}else{
				this.destroy();
			}
		}

	})

	Q.Sprite.extend("Power" , {
		init: function(p){
			// x , y 在發射出去的時候依照人物位置決定
			this._super(p,{
				sprite: "power",
				collisionMask: Q.SPRITE_DEFAULT ,
				angle:0

			}) ;

			// Wait til we are inserted, then listen for events on the stage
			this.on("hit" , this , "collide");

			this.on("power_up,power_recover,disappear");
		},
		disappear: function(){
			this.destroy();
		},

		step: function(dt) {
			this.p.x += this.p.vx * dt;
      this.p.y += this.p.vy * dt;
    	this.stage.collide(this);
    },

    collide: function(col) {
    	if(col.obj.isA("MosAttack") || col.obj.isA("MosKing")) {
    		Q.audio.play("power_collide.ogg",true);
      	this.destroy(); // Power destroy() ;
        col.obj.trigger("destroy");
      }
      else if( col.obj.isA("Enemy") || col.obj.isA("MosKingAttack")){
      	Q.audio.play("power_collide.ogg",true);
      	this.destroy(); // Power destroy() ;
      	col.obj.trigger("attacked");
      }
    },

   	power_up: function(){
			Q.state.set("power_up",1);
		},

		power_recover: function(){
			Q.state.set("power_up",0);
		}
	});

	Q.Sprite.extend("PrePower" , {
		init: function(p){

			this._super(p , {
				sheet: "pre_power",
				sprite: "pre_power",
				opacity:1
			})

			this.add("animation,tween");
			this.play("shoot");
			this.animate({opacity:0} , 0.3 , Q.Easing.Linear , {
				callback: function(){
					this.destroy();
				}
			});
		}
	})

	Q.Sprite.extend("PrePowerUp" , {
		init: function(p){

			this._super(p , {
				sheet: "pre_power_up",
				sprite: "pre_power_up",
				y: 370,
				opacity:1
			})

			this.add("animation,tween");
			this.play("shoot");
			this.animate({opacity:0} , 0.5 , Q.Easing.Linear , {
				callback: function(){
					this.destroy();
				}
			});
		}
	})

}
;Quintus.WarLevels = function(Q) {
  
  var k_m = 6 // 血泡ex
  var k_s = 5 // 血泡

  var z = 4; // 爆
	// var y = 3; // 狂
	var m = 2; // 中
	var s = 1; // 小
	var X = 0; // null

  Q.assets['level1'] = [
    [X,X,s,s,X,X],
    [s,s,s,s,s,s],
    [X,s,s,s,s,X]
  ];

  Q.assets['addMos_2'] = [
    [X,z,X,X,z,X],
    [m,X,m,m,X,m],
    [X,m,s,s,m,X],
    [s,m,X,X,m,s]
  ];

  Q.assets['addMos_3'] = [
    [z,X,m,m,X,z],
    [m,z,s,s,z,m],
    [X,m,X,X,m,X],
    [z,s,m,m,s,z],
    [X,s,s,s,s,X]
  ];

  Q.assets['addKingattack_s_1'] = [
    [X,k_s,X,k_s,k_s,k_s,k_s,k_s,k_s,X,k_s,X]
  ];
  Q.assets['addKingattack_s_2'] = [
    [k_s,X,k_s,X,X,k_s,X,k_s,k_s,X,k_s,k_s]
  ];
  Q.assets['addKingattack_s_3'] = [
    [X,k_s,k_s,k_s,X,X,k_s,X,X,k_s,k_s,k_s]
  ];
};

/*

STATE: 
1: player_h 主角的身長
2: lives 生命！
3: level 關卡
4: katha 指吃到哪一個奧義的編號（用來顯示捲軸）
5: player_state 角色介紹編號（1:掌蚊人，2:蚊子王，3:蚊子將軍，4:蚊子） 
6: power_up 控制攻擊泡泡，有沒有變大
7: mosking_life 蚊子王的生命 預設10
8: isPlayerAttack: if player attack?
9: isLevelStop : if level stop
10:iskatha1 : if katha_1 ING?
11:isKatha2 : if katha_2 ING?
12:isKatha3 : if katha_3 ING?
13:is_countdown_over: if countdown over?
14:is_video_over: if video over?
15:video_num: video NUM ;
16:isMosenter: if Mosenter ?
17:isMosenterScene: if MosenterScene NUMBER (蚊子第幾次出現）?
18:whichBGM : which BGM player now in !
-
gameDescription: stage-2
hud: stage-1
katha: stage-2
countdown: stage-3
mosEnter: stage-4

-
video_num: 0 --> openinig
video_num: 1 --> fight
video_num: 2 --> mosking_appear
video_num: 3 --> winnerB
video_num: 4 --> winnerA
video_num: 5 --> winnerS
------------------
CONTROL SCENE:
(1)win: enemy_sprite.js --> trigger 'complete'( 人消失、針消失 )
(2)lose: level_ui.js --> trigger 'lose'（ 血泡消失、針消失、人消失）

 */
;Quintus.WarScenes = function(Q) {
	
	var level ; // Level_BG 

	// The Main MenuBar
	Q.scene("title" , function(stage){

		// Set up the game state
    Q.state.reset({ 
    	player_h: 0 ,
    	lives: 4,
    	level: 0 ,
    	katha: 0 ,
    	player_state: 1 ,
    	power_up: 0 ,
    	mosking_life: 2 ,
    	isPlayerAttack: false ,
    	isStop: false,
    	iskatha1: false ,
    	iskatha2: false ,
    	iskatha3: false ,
    	is_countdown_over: false,
    	is_video_over: false,
    	video_num: 0,
    	isMosenter: false ,
    	isMosenterScene: 0,
    	winnerTime: 0,
    	whichBGM: bgm_opening
    });

    if(GAME.VIDEO.isOpening === false){
    	playBGM(bgm_opening ,1);
    }

		var bg = stage.insert(new Q.Background()) ;
		var landing_logo = stage.insert(new Q.Logo()) ;
		var landing_play = stage.insert(new Q.Landing_start());
		var landing_player = stage.insert(new Q.Landing_player());

		// Clear the hud out
		Q.clearStage(1) ;
		setState('這是... 掌蚊的世界...');

		// ＊＊＊＊＊＊
		// 開始玩遊戲!!
		// ＊＊＊＊＊＊
		landing_play.on('touch' , function(){
			Q.audio.play("click.mp3");
			stopBGM(Q.state.get("whichBGM"));

			// animate BG!
			bg.animate({ cy: Q.height/2 }, 1, Q.Easing.Quadratic.InOut , {
				callback: function(){
					// delay 0.02 sec , 因為stageScene 換太快，導致中間會出現黑屏
					window.setTimeout(function(){Q.stageScene("introStory");},20);
				}
			});

			// 消失 LOGO
			landing_logo.animate({ opacity: 0 }, 0.5 , Q.Easing.Quadratic.InOut , {
				callback: function(){ this.destroy(); }
			}) ;

			// 消失按鍵
			landing_play.animate({ opacity: 0 }, 0.5 , Q.Easing.Quadratic.InOut , {
				callback: function(){ this.destroy(); }
			}) ;
			landing_player.animate({ opacity: 0 }, 0.5 , Q.Easing.Quadratic.InOut , {
				callback: function(){ this.destroy(); }
			}) ;
		});

		// ＊＊＊＊＊＊
		// 角色說明!!
		// ＊＊＊＊＊＊
		landing_player.on('touch' , function(){
			Q.audio.play("click.mp3");
			stopBGM(Q.state.get("whichBGM"));

			// 消失背景
			bg.animate({ opacity: 0 }, 1, Q.Easing.Quadratic.InOut , {
				callback: function(){
					landing_logo.destroy();
					landing_play.destroy(); 
					landing_player.destroy();
					this.destroy();
				}
			});

			// 消失 LOGO
			landing_logo.animate({ opacity: 0 }, 0.5 , Q.Easing.Quadratic.InOut , {
				callback: function(){Q.stageScene("introPlayerMan");}
			}) ;

			// 消失按鍵
			landing_play.animate({ opacity: 0 }, 0.5 , Q.Easing.Quadratic.InOut);
			landing_player.animate({ opacity: 0 }, 0.5 , Q.Easing.Quadratic.InOut) ;
		});
	})

	Q.scene("introStory" , function(stage){

		setState('記得先看「怎麼玩」，衝吧');
		playBGM(bgm_ready_start,0.4);

		var intro_bg = stage.insert(new Q.IntroBg()) ;
		var intro_man = stage.insert(new Q.IntroMan()) ;
		var intro_text = stage.insert(new Q.IntroText()) ;
		var intro_howplay = stage.insert(new Q.IntroHowplay());
		var intro_go = stage.insert(new Q.IntroGo());
		
		intro_howplay.on("touch" , function(){
			Q.audio.play("click.mp3");
			Q.stageScene("gameDescription");
		});

		// start game!
		intro_go.on('touch' , function(){
			Q.audio.play("click.mp3");
			stopBGM(Q.state.get("whichBGM")) ;

			intro_bg.animate({opacity: 0} , 1 , Q.Easing.Linear ,{
				callback: function(){
					intro_text.destroy();
					intro_go.destroy();
					intro_howplay.destroy();
				}
			}) ;
			intro_text.animate({opacity: 0} , 0.5 , Q.Easing.Linear , {
				callback: function(){Q.stageScene("level1")}
			}) ;
			intro_go.animate({opacity: 0 }, 0.5 ,  Q.Easing.Linear);
			intro_howplay.animate({opacity: 0 }, 0.5 ,  Q.Easing.Linear);
			intro_man.animate({scale: 0} , 0.3 , Q.Easing.Quadratic.InOut , {
				callback: function(){ this.destroy(); }
			}) ;
			
		})

	});

	Q.scene("gameDescription" , function(stage){

		stage.insert(new Q.GameDescription_bg());
		stage.insert(new Q.UI.Text({
			label: "A鍵向左，D鍵向右",
			color: "black",
			x: 100 ,
			y: 150,
			weight: "normal",
			align: "left",
			family:"Arial,微軟正黑體,sans-serif",
			size: 16
		}))

		stage.insert(new Q.UI.Text({
			label: "點擊左鍵發射氣功砲，\n打擊邪惡的蚊子大軍。",
			color: "black",
			x: 100,
			y: 190,
			weight: "normal",
			align: "left",
			family:"Arial,微軟正黑體,sans-serif",
			size: 16
		}))

		stage.insert(new Q.UI.Text({
			label: "邪惡的白線斑蚊將以\n「血刺」攻擊玩家。",
			color: "black",
			x: 100 ,
			y: 345,
			weight: "normal",
			align: "left",
			family:"Arial,微軟正黑體,sans-serif",
			size: 16
		}))

		stage.insert(new Q.UI.Text({
			label: "捲軸記載了掌蚊奧義，\n打開即可使用",
			color: "black",
			x: 100,
			y: 410 ,
			weight: "normal",
			align: "left",
			family:"Arial,微軟正黑體,sans-serif",
			size: 16
		}))

		var close_btn = stage.insert(new Q.Sprite({
			x: Q.width - 120,
      y: Q.height/2 + 190,
			asset: 'katha/katha_close.png',
      type: Q.SPRITE_UI
		}))

		close_btn.on("touch", function(){
			Q.audio.play("click.mp3");
			Q.clearStage(2);
		})

	} , {stage : 2 });

	Q.scene("introPlayerMan" , function(stage){
		
		setState('請你聽我... 娓娓道來...');
		playBGM(bgm_player_man);

		// SET player_state = 1
		Q.state.set('player_state' , 1);

		stage.insert(new Q.PlayerManBg()) ;
		stage.insert(new Q.PlayerManRotate());
		stage.insert(new Q.PlayerManMan());
		stage.insert(new Q.PlayerManText1());

		Q.stageScene("playerFooter") ;

		console.log("Scene: introPlayerMan");
	});

	Q.scene("introPlayerMosking" , function(stage){

		playBGM(bgm_player_mosking);

		// SET player_state = 2
		Q.state.set('player_state' , 2);

		stage.insert(new Q.PlayerMoskingBg()) ;
		stage.insert(new Q.PlayerMoskingRotate());
		stage.insert(new Q.PlayerMosking());

		Q.stageScene("playerFooter") ;
		console.log("Scene: introPlayerMosking");

	});

	Q.scene("introPlayerMosG" , function(stage){

		playBGM(bgm_player_mosG);

		// SET player_state = 3
		Q.state.set('player_state' , 3);

		stage.insert(new Q.PlayerMosGBg()) ;
		stage.insert(new Q.PlayerMoskingRotate());
		stage.insert(new Q.PlayerMosG());

		Q.stageScene("playerFooter") ;
		console.log("Scene: introPlayerMosG");

	});

	Q.scene("introPlayerMos" , function(stage){

		playBGM(bgm_player_mos);

		// SET player_state = 4
		Q.state.set('player_state' , 4);

		stage.insert(new Q.PlayerMosBg()) ;
		stage.insert(new Q.PlayerMoskingRotate());
		stage.insert(new Q.PlayerMos());

		Q.stageScene("playerFooter") ;
		console.log("Scene: introPlayerMos");

	});

	Q.scene("playerFooter", function(stage){
		var player_state = Q.state.get("player_state");
		var back = stage.insert(new Q.PlayerBack());

		right = stage.insert(new Q.PlayerRight());
		left = stage.insert(new Q.PlayerLeft());

		right.on("touch" , function(){
			Q.audio.play("click.mp3");

			if(player_state == 1){
				stopBGM(bgm_player_man);
				Q.stageScene("introPlayerMosking");
			}else if(player_state == 2){
				stopBGM(bgm_player_mosking);
				Q.stageScene("introPlayerMosG");
			}else if (player_state == 3){
				stopBGM(bgm_player_mosG);
				Q.stageScene("introPlayerMos")
			}else if (player_state == 4){
				stopBGM(bgm_player_mos);
				Q.stageScene("introPlayerMan")
			}

			right.play("click");
			// Ｑ：why 'this.play("click")' didn't work;
		})

		left.on("touch" , function(){
			Q.audio.play("click.mp3");

			if(player_state == 1){
				stopBGM(bgm_player_man);
				Q.stageScene("introPlayerMos");
			}else if(player_state == 2){
				stopBGM(bgm_player_mosking);
				Q.stageScene("introPlayerMan");
			}else if (player_state == 3){
				stopBGM(bgm_player_mosG);
				Q.stageScene("introPlayerMosking")
			}else if (player_state == 4){
				stopBGM(bgm_player_mos);
				Q.stageScene("introPlayerMosG")
			}

			left.play("click");
		})

		back.on("touch" , function(){
			Q.audio.play("click.mp3");

			if(player_state === 1){
				stopBGM(bgm_player_man);
			}else if(player_state === 2){
				stopBGM(bgm_player_mosking);
			}else if (player_state === 3){
				stopBGM(bgm_player_mosG);
			}else if( player_state === 4){
				stopBGM(bgm_player_mos);
			}

			Q.stageScene("title") ;
		})

	} , {stage: 1});

	Q.scene("mosEnter" , function(stage){
		
		var mosEnterScene = Q.state.get("isMosenterScene");
		Q.state.set("isMosenter",true);

		stage.insert(new Q.Mosking_talk());
		stage.insert(new Q.Mosking_talk_frame());

		if(mosEnterScene ==2){

			stopBGM(bgm_level1);
			playBGM(bgm_mos_appear);
			
			var text = stage.insert(new Q.Mosking_talk_text_2());
		}
		else if(mosEnterScene ==3){
			stopBGM(bgm_mos_appear);
			playBGM(bgm_mosG_appear);

			var text = stage.insert(new Q.Mosking_talk_text_3());
		}

		text.animate({opacity:1},0.3,Q.Easing.Quadratic.InOut,{
			delay:0.6,
			callback: function(){
				level.on("touch",function(){

					Q.audio.play("click.mp3");
					Q.clearStage(4);

					var circle = Q.stage().insert(new Q.Mos_magic_circle());
					circle.animate({scale:1 , opacity:1},0.3,Q.Easing.Quadratic.InOut , {
						callback: function(){
							this.stage.insert(new Q.MosquitoTracker({
	    					data: Q.asset("addMos_"+ mosEnterScene) ,
	    					y: 70,
	    					scale: 1,
	    					direct:"up"
	    				}));

	    				if (mosEnterScene == 3)
	    					Q.audio.play("mosG_scream.mp3");

	    				this.animate({opacity:0},0.5,Q.Easing.Linear,{
	    					delay:0.5,
	    					callback:function(){ 
	    						if(mosEnterScene == 2)
	    							Q.audio.play("mos_scream.mp3");

	    						this.destroy();
	    						Q.state.set("isMosenter",false);
	    					;}
	    				})
						}
					});

					level.listeners.touch.pop(); // pop "touch" Event ;
				})
			}
		});
	},{stage: 4});

	Q.scene("katha" , function(stage){                  
		// kathaNum 會再吃到捲軸的時候被設定！
		var btn ;
		var kathaNum = Q.state.get("katha");
		
		Q.state.set("isLevelStop",true);
		Q.audio.play("katha_drop.mp3")

		if (kathaNum == 1){
			
			setState('一手遮蚊！');
			stage.insert(new Q.Katha_1_bg());
			stage.insert(new Q.Katha_1_title());
			stage.insert(new Q.Katha_1_text());
			stage.insert(new Q.Katha_1_function());
			btn = stage.insert(new Q.Katha_close_btn());

			Q.state.set("iskatha1",true);
		}
		else if(kathaNum == 2 ) {

			setState('縮文成吋！');
			stage.insert(new Q.Katha_2_bg());
			stage.insert(new Q.Katha_2_title());
			stage.insert(new Q.Katha_2_text());
			stage.insert(new Q.Katha_2_function());
			btn = stage.insert(new Q.Katha_close_btn());

			Q.state.set("iskatha2",true);
		}else if (kathaNum == 3){

			setState('防蚊神體！');
			stage.insert(new Q.Katha_3_bg());
			stage.insert(new Q.Katha_3_title());
			stage.insert(new Q.Katha_3_text());
			stage.insert(new Q.Katha_3_function());
			btn = stage.insert(new Q.Katha_close_btn());

			Q.state.set("iskatha3",true);
		}

		// 按鈕
		btn.on("touch" , function(){
			if (kathaNum == 1){
				Q.audio.play("player_powerup.mp3");
				window.setTimeout(function(){ Q("Power").trigger("power_recover"); Q.state.set("iskatha1",false);},10000);
			}else if (kathaNum == 2){
				Q.audio.play("speedup.mp3");
				window.setTimeout(function(){ Q("Player").trigger("player_recover"); Q.state.set("iskatha2",false); } , 10000);
			}else if( kathaNum == 3){
				Q.audio.play("player_invincible.mp3");
				window.setTimeout(function(){ Q("PlayerInvincible").trigger("hidden_destroy"); Q.state.set("iskatha3",false);} , 6666);
			}

			Q.state.set("katha" , 0);
			Q.state.set("isLevelStop",false);

			stageContinue();
			Q.audio.play("click.mp3");
			// Clear the katha
			Q.clearStage(2) ;
		})

	},{ stage: 2});

	// hud --> 下面的分數狀態列
	Q.scene("hud" , function(stage){

		// stage.insert(new Q.Score()) ;
		stage.insert(new Q.Lives_text()) ;
		stage.insert(new Q.LevelStop_btn()) ;

	} , {stage : 1 });

	Q.scene("countdown", function(stage){

		var container = stage.insert(new Q.UI.Container({
			fill: "rgba(90,88,92,0.85)" ,
      shadowColor: "rgba(0,0,0,0.5)",
      w: Q.width,
      h: 120,
      x: - Q.width/2,
      y: Q.height/2 - 30
		}))
		container.add("tween");
		container.animate({x:Q.width/2},0.2 ,Q.Easing.Quadratic.InOut);

		stage.insert(new Q.Countdown_three(),container);
		stage.insert(new Q.Countdown_two(),container);
		stage.insert(new Q.Countdown_one(),container);

		stage.on("countdown_over",function() {  
			var videoNum ;

			Q.state.set("is_countdown_over",true) ;
			videoNum = Q.state.get("video_num") ;

			if( videoNum === 1){
				// Start Timebar , lastUsedTime = 0
				startClock(0); 
			}
			else if (videoNum === 2){
				startClock(getUsedTime()); 	
			}
			
			Q.clearStage(3);
		});

	} , {stage: 3});

	function setupLevel(levelAsset,stage) {
		
		var circle;

		showBar();
    stage.insert(new Q.Player());
    
    Q.state.inc("isMosenterScene",1) ;
    Q.state.set("isMosenter",true);

    circle = Q.stage().insert(new Q.Mos_magic_circle());
    circle.animate({ scale: 1, opacity: 1 }, 0.3, Q.Easing.Quadratic.InOut, {
      callback: function() {
        this.stage.insert(new Q.MosquitoTracker({ data: Q.asset(levelAsset) , direct: "up" , y: 70}));
        this.animate({ opacity: 0 }, 0.5, Q.Easing.Linear, {
          delay: 0.5,
          callback: function() { this.destroy(); Q.state.set("isMosenter", false); }
        })
      }
    });
  }

	// 第一關
	Q.scene("level1" , function(stage){

		setState('來決鬥吧！！');
		level = stage.insert(new Q.Level_bg());

		// Set up the game state
    Q.state.set("level" , 1);
    Q.state.set("isLevelStop" , false);

    Q.stageScene("hud") ;

    setupLevel("level1", stage);
    playVideo(GAME.VIDEO.fight , 1);

    // Set up a listener for when the stage is complete to load the next level
    stage.on("complete",function() {  
    	level.animate({opacity:0},1.5,Q.Easing.Linear,{
    		delay:2,
    		callback:function(){
    			Q.stageScene("winner");  
    		}
    	})
    });

    // Set up a listener for when the stage is losed to lose.
    stage.on("lose",function() {  
    	level.animate({opacity:0},1.5,Q.Easing.Linear,{
    		delay:1,
    		callback:function(){
    			Q.stageScene("gameOver") ;
    		}
    	})
    });
	})

	/*
	Q.scene("level2" , function(stage){
		console.log("level2");

		// 更改 UI.Text
		Q.state.set("level" , 2);
		setupLevel("level2" , stage) ;
		stage.on("complete" , function(){ Q.stageScene("winner"); });
	})
	*/

	// 遊戲結束畫面
	Q.scene("gameOver" , function(stage){
		console.log("Scene: gameOver");

		stopBGM(bgm_heartbeat_slow);
		
		stage.insert(new Q.Sprite({
			asset:"level/gameover_bg.png",
			x: Q.width/2,
			y: Q.height/2
		})) ;

		var goTitle = stage.insert(new Q.Sprite({
			sheet:"level_goTitle_gameover",
			x: Q.width/2,
			y: Q.height/2 - 15,
			scale:1 ,
			opacity:1,
			type: Q.SPRITE_UI
		})) ;

		var goAgain = stage.insert(new Q.Sprite({
			sheet:"level_goAgain_gameover",
			x: Q.width/2,
			y: Q.height/2 + 35,
			scale:1 ,
			opacity:1,
			type: Q.SPRITE_UI
		})) ;

		goTitle.add("tween");
		goAgain.add("tween");

		goTitle.on("touch",function(){ 

			button_click(this);
			stopBGM(bgm_lose);

			Q.audio.play("click.mp3") ;
			Q.stageScene("title")
		});

		goAgain.on("touch",function(){ 
			button_click(this);
			stopBGM(bgm_lose);

			Q.audio.play("click.mp3") ;
			Q.stageScene("level1");
		});

		reset();
	})

	// 遊戲贏家畫面
	Q.scene("winner" , function(stage){
		
		var usedTime = getUsedTime();

		stopBGM(bgm_mosking);
		stopBGM(bgm_heartbeat_slow);
		playBGM(bgm_winner);

		reset();

		if (usedTime <= 240){
			playVideo(GAME.VIDEO.winnerS , 5);
			console.log(usedTime);
		}else if(usedTime <= 270){
			playVideo(GAME.VIDEO.winnerA , 4);
			console.log(usedTime);
		}else{
			playVideo(GAME.VIDEO.winnerB , 3);
			console.log(usedTime);
		}

		stage.insert(new Q.Sprite({
			asset:"level/winner_bg.png",
			x: Q.width/2,
			y: Q.height/2
		})) ;

		var goTitle = stage.insert(new Q.Sprite({
			sheet:"level_goTitle_winner",
			x: Q.width/2,
			y: Q.height/2 + 100,
			opacity:1,
			scale:1,
			type: Q.SPRITE_UI
		})) ;

		var goFanspage = stage.insert(new Q.Sprite({
			sheet:"level_goFanspage_winner",
			x: Q.width/2,
			y: Q.height/2 + 150,
			opacity:1,
			scale:1,
			type: Q.SPRITE_UI
		})) ;
		
		goTitle.add("tween");
		goFanspage.add("tween");

		goTitle.on("touch",function(){
			button_click(this);
			stopBGM(Q.state.get("whichBGM"));

			Q.audio.play("click.mp3");
			Q.stageScene("title") ;
		})

		goFanspage.on("touch",function(){
			button_click(this);
			stopBGM(Q.state.get("whichBGM"));

			Q.audio.play("click.mp3");
			Q.stageScene("title") ;
			window.open('https://www.facebook.com/themosquitoman/', '_blank');
		})
	})
}
;Quintus.WarSprites = function(Q){
	Q.gravityY = 0;
  Q.gravityX = 0;

  // 蚊子的attackTimer
  var attackTimer = [] ;
  var mosId = 0 ;

  // 計算蚊子出來次數
	var addCount = 0 ;
  var attackTimeInterval = 1500 ;
  var player_h;


  // 載入整個場景
	// TileLayer --> GameTiles 
	Q.TileLayer.extend("GameTiles",{
		init: function(p) {
			this._super({
				dataAsset: "level.tmx" ,
				sheet: 'all' ,
				tileW: 10 ,
				tileH: 10 ,
				blockTileW: 21 ,
				blockTileH: 27
			});
		},

		// Override the load method to load the bg.tmx file,
    // then pass the data array to the original implementation
		load: function(dataAsset) {
			var parser = new DOMPaser() ,
					doc = parser.parseFromString( Q.asset(dataAsset) , "application/xml" ) ;

			var layer = doc.getElementByTagName("layer")[0] ,
					width = parseInt(layer.getAttribute("width")),
					height = parseInt(layer.getAttribute("height"));

			var data = [],
					tiles = layer.getElementsByTagName("all"),
					idx = 0;

			for(var y = 0 ; y < height ; y++){
				data[y] = [];
				
				for (var x = 0 ; x < width ; x++){	
					var tile = tiles[idx] ;
					data[y].push(parseInt(tile.getAttribute('gid')-1)) ;
					idx++ ;
				}
			}

			this._super(data);
		},

		collidableTile: function(tileNum) {
      return tileNum != 23;
    }
	});

	// 載入蚊子
	// ＠＠＠＠ 有點搞不懂他在幹嘛 ＠＠＠＠
	// ！！好像是在設置方塊！！
	Q.Sprite.extend("MosquitoTracker" , {
		init: function(p){
			this._super(p,{
				x: Q.width/2 ,
				y: 30 ,
				scale: 0.1,
				count: 0
			})

			this.add("tween");
			this.animate({ scale: 1 },0.4, Q.Easing.Quadratic.InOut);

			// 被insert 的時候 call 它
			this.on("inserted",this,"setupBlocks");
		},

    setupBlocks: function() {
      Q._each(this.p.data,function(row,y) {
        Q._each(row,function(blockNum,x) {
          if(blockNum) { 

            // Add onto the stage, with this as the container
            this.stage.insert(new Q.Enemy({
              num: blockNum,
              x: 80 * x - (row.length / 2 - 0.5) * 80,
              y: 50 * y
            }), this);
          }
        },this);
      },this);
    },

		step: function(dt) {
      this.p.count++ ;

      if(this.p.count % 120 == 0){
      	this.p.y += 20
      	this.c.y += 20
      	this.p.count = 0;
      }
    }
	});

	// 把 timer 變成 attackTimer
	Q.Sprite.extend("Enemy" , {
		init: function(p){
			this._super(p ,{
				sheet: "enemy",
				sprite: "enemy",
				collisionMask: Q.SPRITE_ENEMY ,
				mosId: mosId,
				opacity: 1
			});
			this.add("tween");

			mosId++ ;

			// 掉針！！
			var obj = this ;
			attackTimer.push( setInterval(function(){

				// 決定是否掉落
				var rand = Math.round(Math.random()*6);
				
				player_x =  Q.select('Player').items[0].p.x ;
      	player_y =  Q.select('Player').items[0].p.y ;
      	vx = player_x - obj.c.x ;
      	vy = player_y - obj.c.y ;

      	angle = Math.atan2( vy , vx)/Math.PI*180

				// 要判定場中有沒有出現相同的
				// 因為原倍速太快，所以用比例調整速度
				if(rand == 1 && Q("MosAttack").length < 10){
					obj.stage.insert(new Q.MosAttack({
						x: obj.c.x ,
						y: obj.c.y ,
						vx: (vx>0)? 10 : (-10),
						vy: ((vx>0)? 10: (-10))*vy/vx,
						angle: angle - 90
					}));
				}

			} , attackTimeInterval) );
		},

		destroyed: function(col){
			// 換成死掉的sheet
			this.p.sheet = "enemy_death";

			// 消掉針
			clearInterval( attackTimer[this.p.mosId] );

			// 增加分數
			Q.state.inc("score" , 100) ;

			// 掉寶物(記得調備率)
			var rand = Math.round(Math.random()* 15);

			if( rand == 1 && Q("Katha_1").length == 0){
				this.stage.insert(new Q.Katha_1({
					x: this.c.x ,
					y: this.c.y 
				}));
			}

			// 死掉，destroy
			this.animate({y: this.p.y + 15 , opacity: 0} , 0.3 , Q.Easing.Linear , {
				callback: function(){ this.destroy(); }
			});
		},

	});


	// 載入玩家
	Q.Sprite.extend("Player",{
		init: function(p){
			this._super(p,{
				sheet: 'player' ,
				sprite: 'player',
				type: Q.SPRITE_ENEMY ,
				x: Q.width/2,
				y: 450,
				katha: 0
			}) ;

			player_h = this.p.h ;
		},

		step: function(dt){
			// 控制人物
			var player_w = this.p.w/2 ;
			if (Q.inputs['left']){
				this.p.x -= 5 ;

				if ( this.p.x < player_w)
					this.p.x = player_w ;
			}else if (Q.inputs['right']){
				this.p.x += 5 ;

				if ( this.p.x > (Q.width - player_w))
					this.p.x = (Q.width - player_w) ;
			}

			if(Q("Enemy").length < 5 ){
				if(addCount > 0){
					this.stage.insert(new Q.MosquitoTracker({
	    			data: Q.asset("addRow") ,
	    			y: 0,
	    			scale:1
	    		}));

					addCount-- ;
				} 

				if(addCount == 0 && Q("Enemy").length == 0){
					this.stage.insert(new Q.MosKing());
				}	
			}
		}
	})

	Q.Sprite.extend("Power" , {
		init: function(p){
			
			// x , y 在發射出去的時候依照人物位置決定
			this._super(p,{
				sprite: "power",
				collisionMask: Q.SPRITE_DEFAULT ,
				angle:0

			}) ;

			// Wait til we are inserted, then listen for events on the stage
			this.on("hit" , this , "collide");

			this.on("power_up");
			this.on("power_recover");
		},

		step: function(dt) {
			this.p.x += this.p.vx * dt;
      this.p.y += this.p.vy * dt;
    	this.stage.collide(this);
    },

    collide: function(col) {
    	if(col.obj.isA("Enemy") || col.obj.isA("MosAttack") || col.obj.isA("MosKing")) {
        Q.play("brickDeath.ogg");
        
        // 消掉蚊子 or 針
        col.obj.destroyed();
        this.destroy();
      }
    },

   	power_up: function(){
   		console.log("power_up");
			Q.state.set("power_up",1);
		},

		power_recover: function(){
			console.log("power_recover");
			Q.state.set("power_up",0);
		}
	});

	Q.Sprite.extend("PrePower" , {
		init: function(p){

			this._super(p , {
				sheet: "pre_power",
				sprite: "pre_power",
				opacity:1
			})

			this.add("animation,tween");
			this.play("shoot");
			this.animate({opacity:0} , 0.3 , Q.Linear , {
				callback: function(){
					this.destroy();
				}
			});
		}
	})

	Q.Sprite.extend("PrePowerUp" , {
		init: function(p){

			this._super(p , {
				sheet: "pre_power_up",
				sprite: "pre_power_up",
				y: 370,
				opacity:1
			})

			this.add("animation,tween");
			this.play("shoot");
			this.animate({opacity:0} , 0.5 , Q.Linear , {
				callback: function(){
					this.destroy();
				}
			});
		}
	})

	// 載入大蚊子
	Q.Sprite.extend("MosKing",{
		init: function(p){
			this._super(p,{
				sheet: 'mosking_anim' ,
				sprite: 'mosking_anim',
				collisionMask: Q.SPRITE_ENEMY ,
				x: Q.width/2,
				y: 120,
				life: 20
			}) ;
		},

		destroyed: function(){
			this.p.life -- ;

			if(this.p.life == 0){
				this.destroy();
				this.stage.trigger("complete");
			}
		}
	})

	Q.Sprite.extend("MosAttack" , {
		init: function(p){
			this._super(p,{
				sheet: 'mosattack' ,
				sprite: "mosattack",
				collisionMask: Q.SPRITE_ENEMY 
			})

			this.add("2d");
			this.on("hit" , this ,"collide");
		},

		step: function(dt) {
      this.p.x += this.p.vx * dt ;
      this.p.y += this.p.vy * dt ;
      this.stage.collide(this);

			if(this.p.y > (Q.height - player_h +20))
				this.destroy();
    },

		collide: function(col) {

      // 扣血
    	if(col.obj.isA("Player")) {
      	this.destroy();
        Q.state.dec("lives" , 1) ;
      }
    },

    destroyed: function(){
    	this.destroy();
    }
	})

	// ！！！！
	// 掉卷軸
	// ！！！！
	Q.Sprite.extend("Katha_1" , {
		init: function(p){
			this._super(p,{
				sheet: 'katha_1' ,
				sprite: "katha_1" ,
				collisionMask: Q.SPRITE_ENEMY ,
				vy: 50 
			})

			this.add("2d");
			this.on("hit" , this ,"collide");
		},

		step: function(dt) {
      this.p.y += this.p.vy * dt;
      this.stage.collide(this);

			if(this.p.y > (Q.height - player_h +20))
				this.destroy();
    },

		collide: function(col) {
      
      // 應該要吃到才對
    	if(col.obj.isA("Power") || col.obj.isA("Player")) {
      	this.destroy();

      	// 暫停
      	this.stage.pause();
      	
      	// 更改 state.set
      	Q.state.set("katha" , 1) ;
      	Q.stageScene("katha");

      	// 啟動Katha_1
      	Q("Power").trigger("power_up");
      }
    },

    destroyed: function(){
    	this.destroy();
    }
	})


}